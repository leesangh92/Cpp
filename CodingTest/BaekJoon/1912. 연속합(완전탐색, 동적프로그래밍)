/*
문제
n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다.

예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 정답은 12+21인 33이 정답이 된다.

입력
첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.

출력
첫째 줄에 답을 출력한다.
*/

#include <iostream>
#include <algorithm>

#define MAX_ARR 100000
/* max함수는 #include <algorithm>에 정의되어 있다
#define max(x, y) x > y ? x : y
*/

int main()
{
  int n;
  int arr[MAX_ARR];
    
  std::cin >> n;
  /*#1 완전 탐색(Exhaustive(Brute-force) Search)으로 하는 방법이기에 시간이 많이 소요됨
  for(int i=0; i<n; i++)
  {
    std::cin >> arr[i];
  }
  
  int result = 0; //초기화
  
  for(int i=0; i<n; i++)
  {
    for(int j=0; j<n; j++)
    {
      std::cin >> arr[j];
      
      result = std::max(result, arr[i]+arr[j]);
    }
  }
  */
  
  /*#2 동적프로그래밍을 활용하여 시간 복잡도를 줄임(계산 차수를 낮춤)*/
  int dp[MAX_ARR]; //Dynamic Programming : 동적프로그래밍
  
  for(int i=0; i<n; i++)
  {
    std::cin >> arr[i];
  }
  
  int result = arr[0];
	dp[0] = arr[0];

	for (int i=0; i<n; i++) {
		dp[i] = std::max(dp[i - 1] + arr[i], arr[i]); // std::max ??
		result = std::max(dp[i], result);
	}
  
  std::cout << result;
    
  return 0;
}
