/*
문제
수강신청의 마스터 김종혜 선생님에게 새로운 과제가 주어졌다. 
김종혜 선생님한테는 Si에 시작해서 Ti에 끝나는 N개의 수업이 주어지는데, 최소의 강의실을 사용해서 모든 수업을 가능하게 해야 한다. 
참고로, 수업이 끝난 직후에 다음 수업을 시작할 수 있다. (즉, Ti ≤ Sj 일 경우 i 수업과 j 수업은 같이 들을 수 있다.)
수강신청 대충한 게 찔리면, 선생님을 도와드리자!

입력
첫 번째 줄에 N이 주어진다. (1 ≤ N ≤ 200,000)
이후 N개의 줄에 Si, Ti가 주어진다. (0 ≤ Si < Ti ≤ 109)

출력
강의실의 개수를 출력하라.

입력 예제
3
1 3
2 4
3 5

출력 예제
2
*/

/* 
N개의 강의에 대해서 각각의 시작 시간과 끝나는 시간이 주어졌을 때, 강의실을 얼마나 적게 사용할 수 있는지 계산
"Ti ≤ Sj 일 경우 i 수업과 j 수업은 같이 들을 수 있다"
i번째 강의의 시작시간 Si가 k번째 강의의 끝나는 시간 Tk보다 크거나 같다면, 해당 강의실에서 강의를 이어서 진행할 수 있다.

강의실을 가장 적게 쓰려면 중간에 공백을 최대한 줄여야 한다.
그러기 위해서는 어떤 강의가 끝난 이후에 시간 시간이 제일 빠른 강의를 배치한다.

1. 먼저 모든 강의를 (시작 시간 - 끝나는 시간)이 빠른 순서로 정렬한다.
2. 우선 첫 번째 강의의 끝나는 시간을 pq에 push한다.
3. 이제 두 번째 강의부터 마지막 강의까지 반복문을 통해 확인한다.
3-1. 만일 i번째 강의의 시작 시간이 pq.top()-[기존 강의의 끝나는 시간]과 같거나 더 크다면, 기존의 강의실을 계속 쓸 수 있다는 의미이다.
      따라서 pq.pop() 이후 i번째 강의의 종료 시간을 pq에 push한다.
3-2. 만일 i번째 강의의 시작 시간이 pq.top()-[기존 강의의 끝나는 시간]보다 빠르다면, 기존의 강의실을 사용할 수 없고,
      새로운 강의실에서 강의를 해야 한다.
      따라서 i번째 강의의 종료 시간을 pq에 push한다.
4. 반복문을 모두 진행하고, pq의 size가 필요한 강의실의 개수이다.
*/

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

std::vector<std::pair<int,int>> room; 
std::priority_queue<int, std::vector<int>, std::greater<int>> pq;

int main()
{
	int N;
    std::cin >> N;
  
	int a,b;
	for (int i = 0 ; i < N ; i++)
	{
		std::cin >> a >> b;
		room.push_back(std::make_pair(a,b));
	}
	
	// 시작시간을 기준으로 오름차정렬 
	std::sort(room.begin(), room.end());
	
	// 첫 번째 수업의 끝나는 시간을 pq에 추가 
	pq.push(room[0].second);
	
	for (int j = 1 ; j < N ; j++)
	{
		if (pq.top() <= room[j].first)
		{
			pq.pop();
			pq.push(room[j].second);
		}
		
		else
		{
			pq.push(room[j].second);
		}
	}
	
	std::cout << pq.size();

	return 0;
}
